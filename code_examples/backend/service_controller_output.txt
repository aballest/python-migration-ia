{
  "service_impl": "package es.aballest.football.application.service.impl;\n\nimport es.aballest.football.application.dto.CustomerDto;\nimport es.aballest.football.application.dto.CustomerMapper;\nimport es.aballest.football.application.service.CustomerService;\nimport es.aballest.football.domain.model.Customer;\nimport es.aballest.football.infrastructure.repository.CustomerRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Slf4j\n@Service\n@Transactional(readOnly = true)\n@RequiredArgsConstructor(onConstructor = @__({@Autowired}))\npublic class CustomerServiceImpl implements CustomerService {\n\n    private final CustomerRepository customerRepository;\n\n    private final CustomerMapper customerMapper;\n\n    @Override\n    public List<CustomerDto> getAllCustomers() {\n        List<Customer> customers = customerRepository.findAll();\n        return customers.stream()\n                .map(customerMapper::customerToCustomerDTO)\n                .toList();\n    }\n\n    @Override\n    public Optional<CustomerDto> getCustomerById(Long id) {\n        Optional<Customer> customer = customerRepository.findById(id);\n        return customer.map(customerMapper::customerToCustomerDTO);\n    }\n\n    @Override\n    @Transactional\n    public CustomerDto createCustomer(CustomerDto customerDTO) {\n        Customer customer = customerMapper.customerDTOToCustomer(customerDTO);\n        customer.setId(null);\n        Customer savedCustomer = customerRepository.save(customer);\n        return customerMapper.customerToCustomerDTO(savedCustomer);\n    }\n\n    @Override\n    @Transactional\n    public CustomerDto updateCustomer(Long id, CustomerDto customerDTO) {\n        if (customerRepository.existsById(id)) {\n            Customer customer = customerMapper.customerDTOToCustomer(customerDTO);\n            Customer updatedCustomer = customerRepository.save(customer);\n            return customerMapper.customerToCustomerDTO(updatedCustomer);\n        }\n        return null;\n    }\n\n    @Override\n    @Transactional\n    public void deleteCustomer(Long id) {\n        customerRepository.deleteById(id);\n    }\n}",
  "service_interface": "package es.aballest.football.application.service;\n\nimport es.aballest.football.application.dto.CustomerDto;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface CustomerService {\n\n    List<CustomerDto> getAllCustomers();\n\n    Optional<CustomerDto> getCustomerById(Long id);\n\n    CustomerDto createCustomer(CustomerDto customer);\n\n    CustomerDto updateCustomer(Long id, CustomerDto customer);\n\n    void deleteCustomer(Long id);\n}",
  "controller": "package es.aballest.football.infrastructure.webservice;\n\nimport es.aballest.football.application.dto.CustomerDto;\nimport es.aballest.football.application.service.CustomerService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/customers\")\n@Tag(name = \"Customer API\", description = \"API para la gestión de clientes\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Operation(summary = \"Obtener todos los clientes\", description = \"Devuelve una lista de todos los clientes.\")\n    @ApiResponse(responseCode = \"200\", description = \"Lista obtenida con éxito\")\n    @GetMapping\n    public ResponseEntity<List<CustomerDto>> getAllCustomers() {\n        List<CustomerDto> customers = customerService.getAllCustomers();\n        return ResponseEntity.ok(customers);\n    }\n\n    @Operation(summary = \"Obtener un cliente por ID\", description = \"Devuelve los detalles de un cliente dado su ID.\")\n    @ApiResponses({\n            @ApiResponse(responseCode = \"200\", description = \"Cliente encontrado\",\n                    content = @Content(mediaType = \"application/json\", schema = @Schema(implementation = CustomerDto.class))),\n            @ApiResponse(responseCode = \"404\", description = \"Cliente no encontrado\")\n    })\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<CustomerDto> getCustomerById(@PathVariable Long id) {\n        return customerService.getCustomerById(id)\n                .map(ResponseEntity::ok)\n                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @Operation(summary = \"Crear un nuevo cliente\", description = \"Crea un nuevo cliente y lo guarda en la base de datos.\")\n    @ApiResponses({\n            @ApiResponse(responseCode = \"201\", description = \"Cliente creado exitosamente\"),\n            @ApiResponse(responseCode = \"400\", description = \"Solicitud inválida\")\n    })\n    @PostMapping\n    public ResponseEntity<CustomerDto> createCustomer(@Valid @RequestBody CustomerDto customerDto) {\n        CustomerDto createdCustomer = customerService.createCustomer(customerDto);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);\n    }\n\n    @Operation(summary = \"Actualizar un cliente existente\", description = \"Actualiza los datos de un cliente dado su ID.\")\n    @ApiResponses({\n            @ApiResponse(responseCode = \"200\", description = \"Cliente actualizado exitosamente\"),\n            @ApiResponse(responseCode = \"404\", description = \"Cliente no encontrado\"),\n            @ApiResponse(responseCode = \"400\", description = \"Solicitud inválida\")\n    })\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<CustomerDto> updateCustomer(@PathVariable Long id, @Valid @RequestBody CustomerDto customerDto) {\n        CustomerDto updatedCustomer = customerService.updateCustomer(id, customerDto);\n        if (updatedCustomer != null) {\n            return ResponseEntity.ok(updatedCustomer);\n        }\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n\n    @Operation(summary = \"Eliminar un cliente\", description = \"Elimina un cliente dado su ID.\")\n    @ApiResponses({\n            @ApiResponse(responseCode = \"200\", description = \"Cliente eliminado exitosamente\"),\n            @ApiResponse(responseCode = \"404\", description = \"Cliente no encontrado\")\n    })\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Long id) {\n        if (customerService.getCustomerById(id).isPresent()) {\n            customerService.deleteCustomer(id);\n            return ResponseEntity.ok().build();\n        }\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}",
  "base_filename": "Customer"
}